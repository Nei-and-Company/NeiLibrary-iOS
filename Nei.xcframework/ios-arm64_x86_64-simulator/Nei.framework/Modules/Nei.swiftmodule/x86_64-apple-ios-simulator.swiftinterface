// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Nei
// swift-module-flags-ignorable: -enable-bare-slash-regex
import BackgroundTasks
import Combine
import CoreLocation
import CoreMotion
import Foundation
import SQLite3
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
extension Nei.BisApi {
  @objc public class RouteViewInfo : ObjectiveC.NSObject {
    public init(routeId: Swift.String)
    public func request() -> Combine.AnyPublisher<[Nei.BisApi.RouteViewInfo.Result], any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi.RouteViewInfo {
  public struct Result : Swift.Codable {
    public var routeId: Swift.String
    public var stopId: Swift.String
    public var stopName: Swift.String
    public var brnStart: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Nei.BisApi.RouteViewInfo : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
@_hasMissingDesignatedInitializers public class BoardingEvaluator {
  public func setSettings(_ settings: Nei.BoardingEvaluator.Settings)
  @objc deinit
}
extension Nei.BoardingEvaluator {
  public struct Settings {
    public let locationWindowSize: Foundation.TimeInterval
    public let speedThreshold: Swift.Double
    public let speedLocationInterval: Foundation.TimeInterval
    public let minimumSpeedSatisfyCount: Swift.Int
    public let distanceThreshold: Swift.Double
    public let nearStationThreshold: Swift.Int
    public let nearStationLocationInterval: Foundation.TimeInterval
    public init(locationWindowSize: Foundation.TimeInterval = 60 * 5, speedThreshold: Swift.Double = 9.0, speedLocationInterval: Foundation.TimeInterval = 10, minimumSpeedSatisfyCount: Swift.Int = 3, distanceThreshold: Swift.Double = 1.5 * 1000, nearStationThreshold: Swift.Int = 3, nearStationLocationInterval: Foundation.TimeInterval = 10)
  }
}
public enum BoardingCondition : Swift.String {
  case motion
  case speed
  case distance
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class TransportationManager {
  public static let shared: Nei.TransportationManager
  public var locationManager: Nei.LocationManager {
    get
    set
  }
  final public let motionManager: Nei.MotionManager
  final public let busStationProvider: Nei.BusStationProvider
  public var boardingEvaluator: Nei.BoardingEvaluator {
    get
    set
  }
  public func setSettings(_ settings: Nei.TransportationManager.Settings)
  public func enter() -> Swift.Bool
  public func exit() -> Swift.Bool
  public func cancel() -> Swift.Bool
  public func observeState() -> Combine.AnyPublisher<Nei.TransportationManager.StateData, Swift.Never>
  public func getStateData() -> Nei.TransportationManager.StateData
  @objc deinit
}
extension Nei.TransportationManager {
  public struct StateData : Swift.Equatable {
    public var state: Nei.TransportationManager.State
    public var enterTrigger: Nei.TransportationManager.EnterTrigger?
    public var boardingCondition: Nei.BoardingCondition?
    public var unboardingCondition: Nei.UnboardingCondition?
    public var tokens: Swift.Int
    public static func == (a: Nei.TransportationManager.StateData, b: Nei.TransportationManager.StateData) -> Swift.Bool
  }
  public enum State : Swift.String {
    case idle
    case checking
    case beginning
    case boarding
    case unboarded
    case failed
    case canceled
    case checkingTimeout
    case boardingTimeout
    case permissionDenied
    public var boarding: Swift.Bool {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EnterTrigger : Swift.String {
    case manual
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension Nei.TransportationManager.StateData : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Nei.TransportationManager {
  public struct Settings {
    public let enableUnboardingCondition: Swift.Bool
    public let checkingTimeout: Foundation.TimeInterval?
    public let boardingTimeout: Foundation.TimeInterval?
    public let allowsBackgroundLocationUpdates: Swift.Bool
    public init(enableUnboardingCondition: Swift.Bool = true, checkingTimeout: Foundation.TimeInterval? = nil, boardingTimeout: Foundation.TimeInterval? = nil, allowsBackgroundLocationUpdates: Swift.Bool = true)
  }
}
public struct NaverApi {
  public enum NaverApiError : Swift.Error {
    case urlError
    public static func == (a: Nei.NaverApi.NaverApiError, b: Nei.NaverApi.NaverApiError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc public class ReverseGeocode : ObjectiveC.NSObject {
    public init(latitude: Swift.Double, longitude: Swift.Double)
    public func request() -> Combine.AnyPublisher<Swift.String?, any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi {
  @objc public class AllBusArrivalInfo : ObjectiveC.NSObject {
    public init(stopId: Swift.String)
    public func request() -> Combine.AnyPublisher<[Nei.BisApi.AllBusArrivalInfo.Result], any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi.AllBusArrivalInfo {
  public struct Result : Swift.Codable {
    public var stopId: Swift.String
    public var busNo: Swift.String
    public var busType: Swift.String
    public var lowType: Swift.String
    public var status: Swift.String
    public var remainStopCnt: Swift.String
    public var remainTime: Swift.String
    public var emergencyCd: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Nei.BisApi.AllBusArrivalInfo : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
@_hasMissingDesignatedInitializers public class MotionManager {
  public func observeMotion() -> Combine.AnyPublisher<CoreMotion.CMMotionActivity, Swift.Never>
  public func getMotion() -> CoreMotion.CMMotionActivity?
  @objc deinit
}
extension Nei.BisApi {
  @objc public class BusStopInfo : ObjectiveC.NSObject {
    public init(stopId: Swift.String)
    public func request() -> Combine.AnyPublisher<Nei.BisApi.BusStopInfo.Result, any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi.BusStopInfo {
  public struct Result : Swift.Codable {
    public var stopId: Swift.String
    public var stopName: Swift.String
    public var stopLimousine: Swift.String
    public var stopTour: Swift.String
    public var stopX: Swift.String
    public var stopY: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Nei.BisApi.BusStopInfo : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
extension Nei.BisApi {
  @objc public class BusLocationInfo : ObjectiveC.NSObject {
    public init(routeId: Swift.String)
    public func request() -> Combine.AnyPublisher<[Nei.BisApi.BusLocationInfo.Result], any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi.BusLocationInfo {
  public struct Result : Swift.Codable {
    public var routeId: Swift.String
    public var stopId: Swift.String
    public var stopName: Swift.String
    public var lowType: Swift.String
    public var busX: Swift.String
    public var busY: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Nei.BisApi.BusLocationInfo : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
extension Nei.BisApi {
  @objc public class RouteBaseInfoDetail : ObjectiveC.NSObject {
    public init(routeId: Swift.String)
    public func request() -> Combine.AnyPublisher<Nei.BisApi.RouteBaseInfoDetail.Result, any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi.RouteBaseInfoDetail {
  public struct Result : Swift.Codable {
    public var routeID: Swift.String
    public var routeNo: Swift.String
    public var busType: Swift.String
    public var travelTime: Swift.String
    public var interval: Swift.String
    public var busCompany: Swift.String
    public var companyTel: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Nei.BisApi.RouteBaseInfoDetail : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
extension Nei.BisApi {
  @objc public class BusStopAroundInfo : ObjectiveC.NSObject {
    public init(latitude: Swift.String, longitude: Swift.String, radius: Swift.String)
    public func request() -> Combine.AnyPublisher<[Nei.BisApi.BusStopAroundInfo.Result], any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi.BusStopAroundInfo {
  public struct Result : Swift.Codable {
    public var stopId: Swift.String?
    public var stopName: Swift.String?
    public var stopLimousine: Swift.String?
    public var stopTour: Swift.String?
    public var stopX: Swift.String?
    public var stopY: Swift.String?
    public var stopRemark: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Nei.BisApi.BusStopAroundInfo : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
@objc @_hasMissingDesignatedInitializers public class LocationManager : ObjectiveC.NSObject {
  public func observeLocation() -> Combine.AnyPublisher<CoreLocation.CLLocation, Swift.Never>
  public func getLocation() -> CoreLocation.CLLocation?
  @objc deinit
}
extension Nei.LocationManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
}
public enum UnboardingCondition {
  case manual
  case walking
  case stationary
  case lackOfLocation
  public static func == (a: Nei.UnboardingCondition, b: Nei.UnboardingCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BusStationProvider {
  public func findNearStations(location: CoreLocation.CLLocation) -> [Nei.BusStationProvider.Data]?
  public func observeStations() -> Combine.AnyPublisher<[Nei.BusStationProvider.Data], Swift.Never>
  @objc deinit
}
extension Nei.BusStationProvider {
  public struct Data {
    public let name: Swift.String
    public let id: Swift.String
  }
}
extension Nei.BisApi {
  @objc public class BusPlateInfo : ObjectiveC.NSObject {
    public init(routeId: Swift.String)
    public func request() -> Combine.AnyPublisher<[Nei.BisApi.BusPlateInfo.Result], any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi.BusPlateInfo {
  public struct Result : Swift.Codable {
    public var routeId: Swift.String
    public var busNo: Swift.String
    public var stopId: Swift.String
    public var stopName: Swift.String
    public var busX: Swift.String
    public var busY: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Nei.BisApi.BusPlateInfo : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
public class Logger {
  public init(transportationManager: Nei.TransportationManager)
  public func writeEventLog(eventLog: [Swift.String : Any?]?)
  public func observeLog() -> Combine.AnyPublisher<Swift.String, Swift.Never>
  public func getLogFile() -> Foundation.URL
  @objc deinit
}
public struct BisApi {
  public enum BisApiError : Swift.Error {
    case urlError
    case xmlParserError
    public static func == (a: Nei.BisApi.BisApiError, b: Nei.BisApi.BisApiError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Nei.BisApi {
  @objc public class AllBusInfo : ObjectiveC.NSObject {
    public init(stopId: Swift.String)
    public func request() -> Combine.AnyPublisher<[Nei.BisApi.AllBusInfo.Result], any Swift.Error>
    @objc deinit
  }
}
extension Nei.BisApi.AllBusInfo {
  public struct Result : Swift.Codable {
    public var busNo: Swift.String
    public var busType: Swift.String
    public var lowType: Swift.String
    public var status: Swift.String
    public var emergencyCd: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Nei.BisApi.AllBusInfo : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
}
extension Nei.BoardingCondition : Swift.Equatable {}
extension Nei.BoardingCondition : Swift.Hashable {}
extension Nei.BoardingCondition : Swift.RawRepresentable {}
extension Nei.TransportationManager.State : Swift.Equatable {}
extension Nei.TransportationManager.State : Swift.Hashable {}
extension Nei.TransportationManager.State : Swift.RawRepresentable {}
extension Nei.TransportationManager.EnterTrigger : Swift.Equatable {}
extension Nei.TransportationManager.EnterTrigger : Swift.Hashable {}
extension Nei.TransportationManager.EnterTrigger : Swift.RawRepresentable {}
extension Nei.NaverApi.NaverApiError : Swift.Equatable {}
extension Nei.NaverApi.NaverApiError : Swift.Hashable {}
extension Nei.UnboardingCondition : Swift.Equatable {}
extension Nei.UnboardingCondition : Swift.Hashable {}
extension Nei.BisApi.BisApiError : Swift.Equatable {}
extension Nei.BisApi.BisApiError : Swift.Hashable {}
